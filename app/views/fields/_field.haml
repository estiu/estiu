- locals.merge!(html_opts: {class: "#{"form-control" unless (as == :checkbox || key == :submit)} #{locals[:html_class]}"})
- %i(autofocus value style).each do |key|
  - locals[:html_opts].merge!(key => locals[key]) if locals.keys.include?(key)

- locals[:html_opts].merge!(required: true) if !locals[:optional] && %i(date datetime text password currency email).include?(as) && !Rails.env.test? # not in test env, so one can test backend validation

.form-group{class: "#{"has-error" if form.object.errors[key].present?}"}
  - render_label = !([:submit].include? key) && !([:hidden].include? as)
  - caption = t("#{prefix}.#{key}", default: key.to_s)
  - locals[:html_opts].merge!(value: caption) if !render_label && !([:hidden].include? as)
  - if render_label
    - label_html = locals.fetch(:label_html, {})
    - label_html[:class] = "#{label_html[:class]} control-label"
    - label_html[:value] = caption
    = form.label key, label_html
  = render "fields/#{as}", locals.merge(locals: locals)
  - if render_label && locals[:optional]
    %span.optional= t 'fields.optional'
  - Array(form.object.errors[key]).each do |error|
    .help-block{class: "#{key}-error #{"error-is-blank" if error == t('errors.messages.blank')}"}= error
  = locals[:after]