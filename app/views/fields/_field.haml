- locals.merge!(html_opts: {class: "#{"form-control" unless (as == :checkbox || key == :submit || as == :checkboxes)} #{locals[:html_class]}"})
- %i(autofocus value style).each do |key|
  - locals[:html_opts].merge!(key => locals[key]) if locals.keys.include?(key)

- locals[:html_opts].merge!(required: true) if !locals[:optional] && %i(date datetime text password currency email).include?(as) && !Rails.env.test? # not in test env, so one can test backend validation

- if locals.keys.include?(:name_prefix)
  - locals[:html_opts].merge!(name: "#{name_prefix}[#{key}]")
  - locals[:html_opts].merge!(id: "#{name_prefix}[#{key}]".gsub('[', '_').gsub(']', ''))

.form-group{class: "#{"has-error" if form.object.errors[key].present?} #{locals[:form_group_class]}"}
  - render_label = !([:submit].include? key) && !([:hidden].include? as)
  - caption = t("#{prefix}.#{key}", default: key.to_s.capitalize)
  - locals[:html_opts].merge!(value: caption) if !render_label && !([:hidden].include? as)
  - if render_label && !locals[:only_input]
    - label_html = locals.fetch(:label_html, {})
    - label_html[:class] = "#{label_html[:class]} control-label"
    - label_html[:value] = caption
    - (label_html[:for] = locals[:html_opts][:id]) if locals[:html_opts][:id].present?
    - if locals[:popover]
      - label_html.merge!('data-toggle' => 'popover',
        'data-content' => (locals[:popover][:text] || locals[:popover][:html]),
        'data-html' => locals[:popover].keys.include?(:html).to_s)
    = form.label key, caption, label_html
  - unless locals[:only_label]
    = render "fields/#{as}", locals.merge(locals: locals)
  - if render_label && locals[:optional]
    %span.optional= t 'fields.optional'
  - Array(form.object.errors[key]).each do |error|
    .help-block{class: "#{key}-error #{"error-is-blank" if error == t('errors.messages.blank')}"}= error
  = locals[:after]